### START SCREEN ###
┌ Source  main_example.rb:5 ─────────────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│   1 require 'ruby_jard'                                    │  self = main                                                 │
│   2 require 'jard_merge_sort'                              │  result_a = nil                                              │
│   3                                                        │  result_b = nil                                              │
│   4 jard                                                   │• sorter = nil                                                │
│⮕  5 sorter = JardMergeSort::Sorter.new([1, 2, 3, 4, 5])    │                                                              │
│   6 result_a = sorter.sort { |a, b| a < b }                │                                                              │
│   7 result_b = sorter.sort { |a, b| a > b }                │                                                              │
│   8 puts result_a                                          │                                                              │
│   9 puts result_b                                          │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
├ Backtrace  1 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 Object in <main> at main_example.rb:5                   │► Thread 1 (run) untitled at main_example.rb:5                │
│                                                            │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["step-out", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  main_example.rb:6 ─────────────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│   1 require 'ruby_jard'                                    │  self = main                                                 │
│   2 require 'jard_merge_sort'                              │• result_a = nil                                              │
│   3                                                        │  result_b = nil                                              │
│   4 jard                                                   │• sorter = #<JardMergeSort::Sorter:?????????????????? @array=[│
│   5 sorter = JardMergeSort::Sorter.new([1, 2, 3, 4, 5])    │  1, 2, 3, 4, 5], @merger=#<JardMergeSort::Merger:????????????│
│⮕  6 result_a = sorter.sort { |a, b| a < b }                │  ??????>>                                                    │
│   7 result_b = sorter.sort { |a, b| a > b }                │                                                              │
│   8 puts result_a                                          │                                                              │
│   9 puts result_b                                          │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
├ Backtrace  1 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 Object in <main> at main_example.rb:6                   │► Thread 1 (run) untitled at main_example.rb:6                │
│                                                            │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort.rb:16> ───────┬ Variables ───────────────────────────────────────────────────┐
│   7   ##                                                   │  self = #<JardMergeSort::Sorter:??????????????????>          │
│   8   # Entry point for merge sort algorithm               │• less = #<Proc:??????????????????????????????????????????????│
│   9   class Sorter                                         │  ????????????????????????????????????????????????????????????│
│  10     def initialize(array)                              │• @array (len:5) = [1, 2, 3, 4, 5]                            │
│  11       @array = array                                   │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│  12       @merger = JardMergeSort::Merger.new              │                                                              │
│  13     end                                                │                                                              │
│  14                                                        │                                                              │
│  15     def sort(&less)                                    │                                                              │
│⮕ 16       do_sort(@array, less)                            │                                                              │
│  17     end                                                │                                                              │
│  18                                                        │                                                              │
│  19     private                                            │                                                              │
│  20                                                        │                                                              │
│  21     def do_sort(array, less)                           │                                                              │
│  22       return [] if array.empty?                        │                                                              │
│  23       return [array.first] if array.length == 1        │                                                              │
│  24                                                        │                                                              │
├ Backtrace  2 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  1 Object in <main> at main_example.rb:6                   │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort.rb:26> ───────┬ Variables ───────────────────────────────────────────────────┐
│  18                                                        │  self = #<JardMergeSort::Sorter:??????????????????>          │
│  19     private                                            │• array (len:5) = [1, 2, 3, 4, 5]                             │
│  20                                                        │• less = #<Proc:??????????????????????????????????????????????│
│  21     def do_sort(array, less)                           │  ????????????????????????????????????????????????????????????│
│  22       return [] if array.empty?                        │• mid = 2                                                     │
│  23       return [array.first] if array.length == 1        │• sorted_left = nil                                           │
│  24                                                        │  sorted_right = nil                                          │
│  25       mid = array.length / 2                           │  @array (len:5) = [1, 2, 3, 4, 5]                            │
│⮕ 26       sorted_left = do_sort(array[0..mid - 1], less)   │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│  27       sorted_right = do_sort(array[mid..array.length - │                                                              │
│     1], less)                                              │                                                              │
│  28       @merger.merge(sorted_left, sorted_right, less)   │                                                              │
│  29     end                                                │                                                              │
│  30   end                                                  │                                                              │
│  31 end                                                    │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
├ Backtrace  3 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 JardMergeSort::Sorter in do_sort                        ├ Threads  1 threads ──────────────────────────────────────────┤
│    in <jard_merge_sort 0.1.0>                              │► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  1 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│                                                              │
│  2 Object in <main> at main_example.rb:6                   │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort.rb:22> ───────┬ Variables ───────────────────────────────────────────────────┐
│  15     def sort(&less)                                    │  self = #<JardMergeSort::Sorter:??????????????????>          │
│  16       do_sort(@array, less)                            │• array (len:1) = [1]                                         │
│  17     end                                                │  less = #<Proc:??????????????????????????????????????????????│
│  18                                                        │  ????????????????????????????????????????????????????????????│
│  19     private                                            │  mid = nil                                                   │
│  20                                                        │  sorted_left = nil                                           │
│  21     def do_sort(array, less)                           │  sorted_right = nil                                          │
│⮕ 22       return [] if array.empty?                        │  @array (len:5) = [1, 2, 3, 4, 5]                            │
│  23       return [array.first] if array.length == 1        │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│  24                                                        │                                                              │
│  25       mid = array.length / 2                           │                                                              │
│  26       sorted_left = do_sort(array[0..mid - 1], less)   │                                                              │
│  27       sorted_right = do_sort(array[mid..array.length - │                                                              │
│     1], less)                                              │                                                              │
├ Backtrace  5 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 JardMergeSort::Sorter in do_sort                        │                                                              │
│    in <jard_merge_sort 0.1.0>                              │                                                              │
│  1 JardMergeSort::Sorter in do_sort                        │                                                              │
│    in <jard_merge_sort 0.1.0>                              ├ Threads  1 threads ──────────────────────────────────────────┤
│  2 JardMergeSort::Sorter in do_sort                        │► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│    in <jard_merge_sort 0.1.0>                              │                                                              │
│  3 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort.rb:27> ───────┬ Variables ───────────────────────────────────────────────────┐
│  20                                                        │  self = #<JardMergeSort::Sorter:??????????????????>          │
│  21     def do_sort(array, less)                           │• array (len:2) = [1, 2]                                      │
│  22       return [] if array.empty?                        │• less = #<Proc:??????????????????????????????????????????????│
│  23       return [array.first] if array.length == 1        │  ????????????????????????????????????????????????????????????│
│  24                                                        │• mid = 1                                                     │
│  25       mid = array.length / 2                           │  sorted_left (len:1) = [1]                                   │
│  26       sorted_left = do_sort(array[0..mid - 1], less)   │• sorted_right = nil                                          │
│⮕ 27       sorted_right = do_sort(array[mid..array.length - │  @array (len:5) = [1, 2, 3, 4, 5]                            │
│     1], less)                                              │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│  28       @merger.merge(sorted_left, sorted_right, less)   │                                                              │
│  29     end                                                │                                                              │
│  30   end                                                  │                                                              │
│  31 end                                                    │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 JardMergeSort::Sorter in do_sort                        │                                                              │
│    in <jard_merge_sort 0.1.0>                              │                                                              │
│  1 JardMergeSort::Sorter in do_sort                        ├ Threads  1 threads ──────────────────────────────────────────┤
│    in <jard_merge_sort 0.1.0>                              │► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  2 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│                                                              │
│  3 Object in <main> at main_example.rb:6                   │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["up", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["array", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["array[mid..array.length - 1]", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
│  19     private                                            │  self = #<JardMergeSort::Sorter:??????????????????>          │
│  20                                                        │• array (len:5) = [1, 2, 3, 4, 5]                             │
│  21     def do_sort(array, less)                           │• less = #<Proc:??????????????????????????????????????????????│
│  22       return [] if array.empty?                        │  ????????????????????????????????????????????????????????????│
│  23       return [array.first] if array.length == 1        │• mid = 2                                                     │
│  24                                                        │• sorted_left = nil                                           │
│  25       mid = array.length / 2                           │  sorted_right = nil                                          │
│⮕ 26       sorted_left = do_sort(array[0..mid - 1], less)   │  @array (len:5) = [1, 2, 3, 4, 5]                            │
│  27       sorted_right = do_sort(array[mid..array.length - │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│     1], less)                                              │                                                              │
│  28       @merger.merge(sorted_left, sorted_right, less)   │                                                              │
│  29     end                                                │                                                              │
│  30   end                                                  │                                                              │
│  31 end                                                    │                                                              │
│                                                            │                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│  0 JardMergeSort::Sorter in do_sort                        │                                                              │
│    in <jard_merge_sort 0.1.0>                              │                                                              │
│⮕ 1 JardMergeSort::Sorter in do_sort                        ├ Threads  1 threads ──────────────────────────────────────────┤
│    in <jard_merge_sort 0.1.0>                              │► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  2 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│                                                              │
│  3 Object in <main> at main_example.rb:6                   │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >> array
=> [1, 2, 3, 4, 5]
jard >> array[mid..array.length - 1]
=> [3, 4, 5]
jard >>
### END SCREEN ###
### START SEND_KEYS ###
["down", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort.rb:28> ───────┬ Variables ───────────────────────────────────────────────────┐
│  21     def do_sort(array, less)                           │  self = #<JardMergeSort::Sorter:??????????????????>          │
│  22       return [] if array.empty?                        │  array (len:2) = [1, 2]                                      │
│  23       return [array.first] if array.length == 1        │• less = #<Proc:??????????????????????????????????????????????│
│  24                                                        │  ????????????????????????????????????????????????????????????│
│  25       mid = array.length / 2                           │  mid = 1                                                     │
│  26       sorted_left = do_sort(array[0..mid - 1], less)   │• sorted_left (len:1) = [1]                                   │
│  27       sorted_right = do_sort(array[mid..array.length - │• sorted_right (len:1) = [2]                                  │
│     1], less)                                              │  @array (len:5) = [1, 2, 3, 4, 5]                            │
│⮕ 28       @merger.merge(sorted_left, sorted_right, less)   │• @merger = #<JardMergeSort::Merger:??????????????????>       │
│  29     end                                                │                                                              │
│  30   end                                                  │                                                              │
│  31 end                                                    │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 JardMergeSort::Sorter in do_sort                        │                                                              │
│    in <jard_merge_sort 0.1.0>                              │                                                              │
│  1 JardMergeSort::Sorter in do_sort                        ├ Threads  1 threads ──────────────────────────────────────────┤
│    in <jard_merge_sort 0.1.0>                              │► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  2 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│                                                              │
│  3 Object in <main> at main_example.rb:6                   │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["step-out", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort.rb:27> ───────┬ Variables ───────────────────────────────────────────────────┐
│  19     private                                            │  self = #<JardMergeSort::Sorter:??????????????????>          │
│  20                                                        │• array (len:5) = [1, 2, 3, 4, 5]                             │
│  21     def do_sort(array, less)                           │• less = #<Proc:??????????????????????????????????????????????│
│  22       return [] if array.empty?                        │  ????????????????????????????????????????????????????????????│
│  23       return [array.first] if array.length == 1        │• mid = 2                                                     │
│  24                                                        │  sorted_left (len:2) = [1, 2]                                │
│  25       mid = array.length / 2                           │• sorted_right = nil                                          │
│  26       sorted_left = do_sort(array[0..mid - 1], less)   │  @array (len:5) = [1, 2, 3, 4, 5]                            │
│⮕ 27       sorted_right = do_sort(array[mid..array.length - │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│     1], less)                                              │                                                              │
│  28       @merger.merge(sorted_left, sorted_right, less)   │                                                              │
│  29     end                                                │                                                              │
│  30   end                                                  │                                                              │
│  31 end                                                    │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
├ Backtrace  3 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 JardMergeSort::Sorter in do_sort                        ├ Threads  1 threads ──────────────────────────────────────────┤
│    in <jard_merge_sort 0.1.0>                              │► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  1 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│                                                              │
│  2 Object in <main> at main_example.rb:6                   │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort/merger.rb:14> ┬ Variables ───────────────────────────────────────────────────┐
│   7                                                        │  self = #<JardMergeSort::Merger:??????????????????>          │
│   8       while !left.empty? || !right.empty?              │• left (len:2) = [1, 2]                                       │
│   9         result <<                                      │• less = #<Proc:??????????????????????????????????????????????│
│  10           if left.empty?                               │  ????????????????????????????????????????????????????????????│
│  11             right.shift                                │  result = []                                                 │
│  12           elsif right.empty?                           │• right (len:3) = [3, 4, 5]                                   │
│  13             left.shift                                 │                                                              │
│⮕ 14           elsif less.call(left[0], right[0])           │                                                              │
│  15             left.shift                                 │                                                              │
│  16           else                                         │                                                              │
│  17             right.shift                                │                                                              │
│  18           end                                          │                                                              │
│  19       end                                              │                                                              │
│  20                                                        │                                                              │
│  21       result                                           │                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 JardMergeSort::Merger in merge                          │                                                              │
│    in <jard_merge_sort 0.1.0>                              │                                                              │
│  1 JardMergeSort::Sorter in do_sort                        ├ Threads  1 threads ──────────────────────────────────────────┤
│    in <jard_merge_sort 0.1.0>                              │► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  2 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│                                                              │
│  3 Object in <main> at main_example.rb:6                   │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step-out", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  main_example.rb:7 ─────────────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│   1 require 'ruby_jard'                                    │  self = main                                                 │
│   2 require 'jard_merge_sort'                              │  result_a (len:5) = [1, 2, 3, 4, 5]                          │
│   3                                                        │• result_b = nil                                              │
│   4 jard                                                   │• sorter = #<JardMergeSort::Sorter:?????????????????? @array=[│
│   5 sorter = JardMergeSort::Sorter.new([1, 2, 3, 4, 5])    │  1, 2, 3, 4, 5], @merger=#<JardMergeSort::Merger:????????????│
│   6 result_a = sorter.sort { |a, b| a < b }                │  ??????>>                                                    │
│⮕  7 result_b = sorter.sort { |a, b| a > b }                │                                                              │
│   8 puts result_a                                          │                                                              │
│   9 puts result_b                                          │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
│                                                            │                                                              │
├ Backtrace  1 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 Object in <main> at main_example.rb:7                   │► Thread 1 (run) untitled at main_example.rb:7                │
│                                                            │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["less.call(1, 3)", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["less.call(100, 99)", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
│   7   ##                                                   │  self = #<JardMergeSort::Sorter:??????????????????>          │
│   8   # Entry point for merge sort algorithm               │• less = #<Proc:??????????????????????????????????????????????│
│   9   class Sorter                                         │  ????????????????????????????????????????????????????????????│
│  10     def initialize(array)                              │• @array (len:5) = [1, 2, 3, 4, 5]                            │
│  11       @array = array                                   │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│  12       @merger = JardMergeSort::Merger.new              │                                                              │
│  13     end                                                │                                                              │
│  14                                                        │                                                              │
│  15     def sort(&less)                                    │                                                              │
│⮕ 16       do_sort(@array, less)                            │                                                              │
│  17     end                                                │                                                              │
│  18                                                        │                                                              │
│  19     private                                            │                                                              │
│  20                                                        │                                                              │
│  21     def do_sort(array, less)                           │                                                              │
│  22       return [] if array.empty?                        │                                                              │
│  23       return [array.first] if array.length == 1        │                                                              │
│  24                                                        │                                                              │
├ Backtrace  2 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  1 Object in <main> at main_example.rb:7                   │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >> less.call(1, 3)
=> false
jard >> less.call(100, 99)
=> true
jard >>
### END SCREEN ###
### START SEND_KEYS ###
["list", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  <jard_merge_sort:lib/jard_merge_sort.rb:16> ───────┬ Variables ───────────────────────────────────────────────────┐
│   7   ##                                                   │  self = #<JardMergeSort::Sorter:??????????????????>          │
│   8   # Entry point for merge sort algorithm               │• less = #<Proc:??????????????????????????????????????????????│
│   9   class Sorter                                         │  ????????????????????????????????????????????????????????????│
│  10     def initialize(array)                              │• @array (len:5) = [1, 2, 3, 4, 5]                            │
│  11       @array = array                                   │  @merger = #<JardMergeSort::Merger:??????????????????>       │
│  12       @merger = JardMergeSort::Merger.new              │                                                              │
│  13     end                                                │                                                              │
│  14                                                        │                                                              │
│  15     def sort(&less)                                    │                                                              │
│⮕ 16       do_sort(@array, less)                            │                                                              │
│  17     end                                                │                                                              │
│  18                                                        │                                                              │
│  19     private                                            │                                                              │
│  20                                                        │                                                              │
│  21     def do_sort(array, less)                           │                                                              │
│  22       return [] if array.empty?                        │                                                              │
│  23       return [array.first] if array.length == 1        │                                                              │
│  24                                                        │                                                              │
├ Backtrace  2 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 JardMergeSort::Sorter in sort in <jard_merge_sort 0.1.0>│► Thread 1 (run) untitled in <jard_merge_sort 0.1.0>          │
│  1 Object in <main> at main_example.rb:7                   │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Gems                                               Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step-out", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["jard output", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
1
2
3
4
5
Program output
### END SCREEN ###
### START SEND_KEYS ###
["q", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["continue", :Enter]
### END SEND_KEYS ###
