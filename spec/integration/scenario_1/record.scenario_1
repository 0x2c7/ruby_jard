### START SCREEN ###
┌ Source  main_example.rb:36 ────────────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  27     2, ListNode.new(                                   │  self = main                                                 │
│  28       2, ListNode.new(                                 │▾ list_a = #<ListNode:??????????????????>                     │
│  29         6                                              │    ▸ @val → 4                                                │
│  30       )                                                │    ▸ @next → #<ListNode:?????????????????? @val → 5, …>      │
│  31     )                                                  │▾ list_b = #<ListNode:??????????????????>                     │
│  32   )                                                    │    ▸ @val → 3                                                │
│  33 )                                                      │    ▸ @next → #<ListNode:?????????????????? @val → 7, …>      │
│  34                                                        │▾ list_c = #<ListNode:??????????????????>                     │
│  35 jard                                                   │    ▸ @val → 1                                                │
│⮕ 36 result_list = MergeKSortedList.call([list_a, list_b, li│    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│     st_c])                                                 │  result = nil                                                │
│  37 result = []                                            │  result_list = nil                                           │
│  38                                                        │                                                              │
│  39 until result_list.nil?                                 │                                                              │
│  40   result << result_list.val                            │                                                              │
│  41   result_list = result_list.next                       │                                                              │
│  42 end                                                    │                                                              │
│  43                                                        │                                                              │
├ Backtrace  1 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 Object in <main> at main_example.rb:36                  │▸ Thread 1 (run) untitled at main_example.rb:36               │
│                                                            │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:9 ──────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│   1 # frozen_string_literal: true                          │  self = MergeKSortedList                                     │
│   2                                                        │  final_head = nil                                            │
│   3 require_relative './list_node'                         │  final_tail = nil                                            │
│   4 require_relative './heap'                              │  heap = nil                                                  │
│   5                                                        │▾ lists (len:3) = [                                           │
│   6 # https://leetcode.com/problems/merge-k-sorted-lists   │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│   7 class MergeKSortedList                                 │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│   8   def self.call(lists)                                 │    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│⮕  9     heap = Heap.new                                    │  ]                                                           │
│  10     lists.each do |head|                               │                                                              │
│  11       heap.push(head) if head                          │                                                              │
│  12     end                                                │                                                              │
│  13                                                        │                                                              │
│  14     final_head = nil                                   │                                                              │
│  15     final_tail = nil                                   │                                                              │
│  16                                                        │                                                              │
│  17     loop do                                            │                                                              │
│  18       jard                                             │                                                              │
├ Backtrace  2 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 MergeKSortedList in call at merge_k_sorted_list.rb:9    │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:9         │
│  1 Object in <main> at main_example.rb:36                  │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:14 ─────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│   5                                                        │  self = MergeKSortedList                                     │
│   6 # https://leetcode.com/problems/merge-k-sorted-lists   │  final_head = nil                                            │
│   7 class MergeKSortedList                                 │  final_tail = nil                                            │
│   8   def self.call(lists)                                 │  heap = #<Heap:?????????????????? @storage → […], @length → 3│
│   9     heap = Heap.new                                    │  >                                                           │
│  10     lists.each do |head|                               │▾ lists (len:3) = [                                           │
│  11       heap.push(head) if head                          │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  12     end                                                │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│  13                                                        │    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│⮕ 14     final_head = nil                                   │  ]                                                           │
│  15     final_tail = nil                                   │                                                              │
│  16                                                        │                                                              │
│  17     loop do                                            │                                                              │
│  18       jard                                             │                                                              │
│  19       node = heap.pop                                  │                                                              │
│  20       break if node.nil?                               │                                                              │
│  21                                                        │                                                              │
│  22       heap.push(node.next) if node.next                │                                                              │
├ Backtrace  2 frames ───────────────────────────────────────┼ Threads  1 threads ──────────────────────────────────────────┤
│⮕ 0 MergeKSortedList in call at merge_k_sorted_list.rb:14   │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:14        │
│  1 Object in <main> at main_example.rb:36                  │                                                              │
│                                                            │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["continue", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:25 ─────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  17     loop do                                            │  self = MergeKSortedList                                     │
│  18       jard                                             │  final_head = nil                                            │
│  19       node = heap.pop                                  │  final_tail = nil                                            │
│  20       break if node.nil?                               │  heap = #<Heap:?????????????????? @storage → […], @length → 3│
│  21                                                        │  >                                                           │
│  22       heap.push(node.next) if node.next                │▾ lists (len:3) = [                                           │
│  23                                                        │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  24       if final_tail.nil?                               │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│⮕ 25         final_head = final_tail = ListNode.new(node.val│    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│     )                                                      │  ]                                                           │
│  26       else                                             │  new_node = nil                                              │
│  27         new_node = ListNode.new(node.val)              │▾ node = #<ListNode:??????????????????>                       │
│  28         final_tail.next = new_node                     │    ▸ @val → 1                                                │
│  29         final_tail = new_node                          │    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│  30       end                                              │                                                              │
│  31     end                                                │                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:25                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  1 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:25        │
│  2 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  3 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["node.val", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:25 ─────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  17     loop do                                            │  self = MergeKSortedList                                     │
│  18       jard                                             │  final_head = nil                                            │
│  19       node = heap.pop                                  │  final_tail = nil                                            │
│  20       break if node.nil?                               │  heap = #<Heap:?????????????????? @storage → […], @length → 3│
│  21                                                        │  >                                                           │
│  22       heap.push(node.next) if node.next                │▾ lists (len:3) = [                                           │
│  23                                                        │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  24       if final_tail.nil?                               │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│⮕ 25         final_head = final_tail = ListNode.new(node.val│    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│     )                                                      │  ]                                                           │
│  26       else                                             │  new_node = nil                                              │
│  27         new_node = ListNode.new(node.val)              │▾ node = #<ListNode:??????????????????>                       │
│  28         final_tail.next = new_node                     │    ▸ @val → 1                                                │
│  29         final_tail = new_node                          │    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│  30       end                                              │                                                              │
│  31     end                                                │                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:25                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  1 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:25        │
│  2 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  3 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >> node.val
=> 1
jard >>

### END SCREEN ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["final_head", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["final_tail", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
│  10     lists.each do |head|                               │  self = MergeKSortedList                                     │
│  11       heap.push(head) if head                          │  final_head = #<ListNode:?????????????????? @val → 1, @next →│
│  12     end                                                │   nil>                                                       │
│  13                                                        │  final_tail = #<ListNode:?????????????????? @val → 1, @next →│
│  14     final_head = nil                                   │   nil>                                                       │
│  15     final_tail = nil                                   │  heap = #<Heap:?????????????????? @storage → […], @length → 3│
│  16                                                        │  >                                                           │
│  17     loop do                                            │▾ lists (len:3) = [                                           │
│⮕ 18       jard                                             │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  19       node = heap.pop                                  │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│  20       break if node.nil?                               │    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│  21                                                        │  ]                                                           │
│  22       heap.push(node.next) if node.next                │  new_node = nil                                              │
│  23                                                        │  node = nil                                                  │
│  24       if final_tail.nil?                               │                                                              │
│  25         final_head = final_tail = ListNode.new(node.val│                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:18                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  1 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:18        │
│  2 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  3 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >> final_head
=> #<ListNode:?????????????????? @next=nil, @val=1>
jard >> final_tail
=> #<ListNode:?????????????????? @next=nil, @val=1>
jard >>
### END SCREEN ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:29 ─────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  21                                                        │  self = MergeKSortedList                                     │
│  22       heap.push(node.next) if node.next                │▾ final_head = #<ListNode:??????????????????>                 │
│  23                                                        │    ▸ @val → 1                                                │
│  24       if final_tail.nil?                               │    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│  25         final_head = final_tail = ListNode.new(node.val│▾ final_tail = #<ListNode:??????????????????>                 │
│     )                                                      │    ▸ @val → 1                                                │
│  26       else                                             │    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│  27         new_node = ListNode.new(node.val)              │  heap = #<Heap:?????????????????? @storage → […], @length → 3│
│  28         final_tail.next = new_node                     │  >                                                           │
│⮕ 29         final_tail = new_node                          │▾ lists (len:3) = [                                           │
│  30       end                                              │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  31     end                                                │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│  32     final_head                                         │    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│  33   end                                                  │  ]                                                           │
│  34 end                                                    │  new_node = #<ListNode:?????????????????? @val → 2, @next → n│
│                                                            │  il>                                                         │
├ Backtrace  4 frames ───────────────────────────────────────┤▾ node = #<ListNode:??????????????????>                       │
│⮕ 0 MergeKSortedList in call (block)                        │    ▸ @val → 2                                                │
│    at merge_k_sorted_list.rb:29                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  1 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:29        │
│  2 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  3 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["continue", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["final_tail", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:19 ─────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  11       heap.push(head) if head                          │  self = MergeKSortedList                                     │
│  12     end                                                │▾ final_head = #<ListNode:??????????????????>                 │
│  13                                                        │    ▸ @val → 1                                                │
│  14     final_head = nil                                   │    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│  15     final_tail = nil                                   │  final_tail = #<ListNode:?????????????????? @val → 2, @next →│
│  16                                                        │   nil>                                                       │
│  17     loop do                                            │  heap = #<Heap:?????????????????? @storage → […], @length → 3│
│  18       jard                                             │  >                                                           │
│⮕ 19       node = heap.pop                                  │▾ lists (len:3) = [                                           │
│  20       break if node.nil?                               │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  21                                                        │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│  22       heap.push(node.next) if node.next                │    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│  23                                                        │  ]                                                           │
│  24       if final_tail.nil?                               │  new_node = nil                                              │
│  25         final_head = final_tail = ListNode.new(node.val│  node = nil                                                  │
│     )                                                      │                                                              │
├ Backtrace  4 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:19                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  1 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:19        │
│  2 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  3 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >> final_tail
=> #<ListNode:?????????????????? @next=nil, @val=2>
jard >>

### END SCREEN ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  heap.rb:10 ────────────────────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│   3 class Heap                                             │  self = #<Heap:?????????????????? @storage → […], @length → 3│
│   4   def initialize                                       │  >                                                           │
│   5     @storage = []                                      │  @length = 3                                                 │
│   6     @length = 0                                        │▾ @storage (len:3) = [                                        │
│   7   end                                                  │    ▸ #<ListNode:?????????????????? @val → 2, …>              │
│   8                                                        │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│   9   def pop                                              │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│⮕ 10     return nil if @length <= 0                         │  ]                                                           │
│  11                                                        │                                                              │
│  12     swap(0, @length - 1)                               │                                                              │
│  13     @length -= 1                                       │                                                              │
│  14     heap_down(0)                                       │                                                              │
│  15     @storage[@length]                                  │                                                              │
│  16   end                                                  │                                                              │
│  17                                                        │                                                              │
├ Backtrace  5 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 Heap in pop at heap.rb:10                               │                                                              │
│  1 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:19                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  2 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at heap.rb:10                       │
│  3 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  4 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["step", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  heap.rb:25 ────────────────────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  18   def push(node)                                       │  self = #<Heap:?????????????????? @storage → […], @length → 2│
│  19     @length += 1                                       │  >                                                           │
│  20     @storage[@length - 1] = node                       │  min_pos = nil                                               │
│  21     heap_up(@length - 1)                               │  position = 0                                                │
│  22   end                                                  │  @length = 2                                                 │
│  23                                                        │▾ @storage (len:3) = [                                        │
│  24   def heap_down(position)                              │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│⮕ 25     while position < @length                           │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  26       min_pos = find_min_pos(position, position * 2 + 1│    ▸ #<ListNode:?????????????????? @val → 2, …>              │
│     , position * 2 + 2)                                    │  ]                                                           │
│  27       return if min_pos == position                    │                                                              │
│  28                                                        │                                                              │
│  29       swap(position, min_pos)                          │                                                              │
│  30       position = min_pos                               │                                                              │
├ Backtrace  6 frames ───────────────────────────────────────┤                                                              │
│⮕ 0 Heap in heap_down at heap.rb:25                         │                                                              │
│  1 Heap in pop at heap.rb:14                               │                                                              │
│  2 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:19                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  3 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at heap.rb:25                       │
│  4 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  5 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["up", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["up", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:19 ─────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  12     end                                                │  self = MergeKSortedList                                     │
│  13                                                        │▾ final_head = #<ListNode:??????????????????>                 │
│  14     final_head = nil                                   │    ▸ @val → 1                                                │
│  15     final_tail = nil                                   │    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│  16                                                        │  final_tail = #<ListNode:?????????????????? @val → 2, @next →│
│  17     loop do                                            │   nil>                                                       │
│  18       jard                                             │  heap = #<Heap:?????????????????? @storage → […], @length → 2│
│⮕ 19       node = heap.pop                                  │  >                                                           │
│  20       break if node.nil?                               │▾ lists (len:3) = [                                           │
│  21                                                        │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  22       heap.push(node.next) if node.next                │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│  23                                                        │    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│  24       if final_tail.nil?                               │  ]                                                           │
│  25         final_head = final_tail = ListNode.new(node.val│  new_node = nil                                              │
├ Backtrace  6 frames ───────────────────────────────────────┤  node = nil                                                  │
│  0 Heap in heap_down at heap.rb:25                         │                                                              │
│  1 Heap in pop at heap.rb:14                               │                                                              │
│⮕ 2 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:19                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  3 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:19        │
│  4 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  5 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["down", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  heap.rb:14 ────────────────────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│   7   end                                                  │  self = #<Heap:?????????????????? @storage → […], @length → 2│
│   8                                                        │  >                                                           │
│   9   def pop                                              │  @length = 2                                                 │
│  10     return nil if @length <= 0                         │▾ @storage (len:3) = [                                        │
│  11                                                        │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│  12     swap(0, @length - 1)                               │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  13     @length -= 1                                       │    ▸ #<ListNode:?????????????????? @val → 2, …>              │
│⮕ 14     heap_down(0)                                       │  ]                                                           │
│  15     @storage[@length]                                  │                                                              │
│  16   end                                                  │                                                              │
│  17                                                        │                                                              │
│  18   def push(node)                                       │                                                              │
│  19     @length += 1                                       │                                                              │
│  20     @storage[@length - 1] = node                       │                                                              │
├ Backtrace  6 frames ───────────────────────────────────────┤                                                              │
│  0 Heap in heap_down at heap.rb:25                         │                                                              │
│⮕ 1 Heap in pop at heap.rb:14                               │                                                              │
│  2 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:19                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  3 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at heap.rb:14                       │
│  4 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  5 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["step-out", :Enter]
### END SEND_KEYS ###
### START SCREEN ###
┌ Source  merge_k_sorted_list.rb:20 ─────────────────────────┬ Variables ───────────────────────────────────────────────────┐
│  12     end                                                │  self = MergeKSortedList                                     │
│  13                                                        │▾ final_head = #<ListNode:??????????????????>                 │
│  14     final_head = nil                                   │    ▸ @val → 1                                                │
│  15     final_tail = nil                                   │    ▸ @next → #<ListNode:?????????????????? @val → 2, …>      │
│  16                                                        │  final_tail = #<ListNode:?????????????????? @val → 2, @next →│
│  17     loop do                                            │   nil>                                                       │
│  18       jard                                             │  heap = #<Heap:?????????????????? @storage → […], @length → 2│
│  19       node = heap.pop                                  │  >                                                           │
│⮕ 20       break if node.nil?                               │▾ lists (len:3) = [                                           │
│  21                                                        │    ▸ #<ListNode:?????????????????? @val → 4, …>              │
│  22       heap.push(node.next) if node.next                │    ▸ #<ListNode:?????????????????? @val → 3, …>              │
│  23                                                        │    ▸ #<ListNode:?????????????????? @val → 1, …>              │
│  24       if final_tail.nil?                               │  ]                                                           │
│  25         final_head = final_tail = ListNode.new(node.val│  new_node = nil                                              │
│     )                                                      │▾ node = #<ListNode:??????????????????>                       │
│  26       else                                             │    ▸ @val → 2                                                │
├ Backtrace  4 frames ───────────────────────────────────────┤    ▸ @next → #<ListNode:?????????????????? @val → 6, …>      │
│⮕ 0 MergeKSortedList in call (block)                        │                                                              │
│    at merge_k_sorted_list.rb:20                            ├ Threads  1 threads ──────────────────────────────────────────┤
│  1 [c] Kernel in loop at merge_k_sorted_list.rb:17         │▸ Thread 1 (run) untitled at merge_k_sorted_list.rb:20        │
│  2 MergeKSortedList in call at merge_k_sorted_list.rb:17   │                                                              │
│  3 Object in <main> at main_example.rb:36                  │                                                              │
├────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────┤
│Filter (F2): Application                                        Step (F7)   Step Out (Shift+F7)   Next (F8)   Continue (F9)│
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
jard >>



### END SCREEN ###
### START SEND_KEYS ###
["next", :Enter]
### END SEND_KEYS ###
### START SEND_KEYS ###
["exit", :Enter]
### END SEND_KEYS ###
