(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),i=(n(0),n(93)),l={id:"Filter",slug:"filter"},o={unversionedId:"guides/Filter",id:"guides/Filter",isDocsHomePage:!1,title:"Filter",description:"You can either change the filter mode on-the-fly with the filter comamnd or use a global/per-project configuration file. Ruby Jard features a powerful filtering system. This system consists of a filter mode, include list, and exclude list. The filter mode defines how Ruby Jard reacts to control flow commands. There are 4 filter modes:",source:"@site/docs/guides/filter.md",slug:"/guides/filter",permalink:"/docs/guides/filter",editUrl:"https://github.com/nguyenquangminh0711/ruby_jard/edit/master/website/docs/guides/filter.md",version:"current",sidebar:"docs",previous:{title:"REPL console screen",permalink:"/docs/guides/repl-console-screen"},next:{title:"Key bindings",permalink:"/docs/guides/key-bindings"}},c=[{value:"Filter in action",id:"filter-in-action",children:[]},{value:"Examples",id:"examples",children:[]}],b={rightToc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"You can either change the filter mode on-the-fly with the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/commands/filter"}),"filter comamnd")," or use a global/per-project ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/configurations"}),"configuration file"),". Ruby Jard features a powerful filtering system. This system consists of a filter mode, include list, and exclude list. The filter mode defines how Ruby Jard reacts to control flow commands. There are 4 filter modes:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Application (",Object(i.b)("inlineCode",{parentName:"p"},"application"),") - default mode. This mode filters out all backtraces in gems, the standard library, and some weird places you won't be interested in. All control flow commands (",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/commands/step"}),"step"),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/commands/next"}),"next"),") bypass gems and the standard lib and stop at the next point in the application only.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Gems (",Object(i.b)("inlineCode",{parentName:"p"},"gems"),"). This mode allows you to step into gem code ",Object(i.b)("em",{parentName:"p"},"and")," the application layer. This mode is useful when you need to debug a problem inside a gem called from your application. All backtrace information from the application and gems is visible. All control flow commands bypass the standard library only.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Everything (",Object(i.b)("inlineCode",{parentName:"p"},"everything"),"). This mode enables you to step anywhere, including the standard library. This is the most powerful (and noisiest!). One note here: Ruby Jard can't step into any method implemented in C.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Source Tree (",Object(i.b)("inlineCode",{parentName:"p"},"source_tree"),"). This mode is the most restrictive. It only allows you to jump into a file belonging to the source tree rooted in the current working directory. This mode is useful if you only care about the code in a particular subfolder of a big project or mono-repo (hi Stripe)."))),Object(i.b)("p",null,"Filter modes work with the include/exclude lists, which make use of ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://ruby-doc.org/core-2.6.3/Dir.html"}),"Ruby glob patterns"),". The lists are comprised of gem name and path."),Object(i.b)("h3",{id:"filter-in-action"},"Filter in action"),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://asciinema.org/a/359326"}),Object(i.b)("img",Object(a.a)({parentName:"a"},{src:"https://asciinema.org/a/359326.svg",alt:"Filter in action"})))),Object(i.b)("h3",{id:"examples"},"Examples"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Filter mode"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Included list"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Excluded list"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Meanings"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"application")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"i18n")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Break in application code and anything in the ",Object(i.b)("inlineCode",{parentName:"td"},"i18n")," gem.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"application")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"httparty"),", ",Object(i.b)("inlineCode",{parentName:"td"},"faraday")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"lib/dsl/*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"lib/shared/*")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Break in application code and the httparty and faraday gems; ignore DSL files and shared libraries")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"application")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"aws-*")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"sidekiq")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Break in application code and all AWS gems, but ignore the sidekiq framework")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"application")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"ipaddr"),", ",Object(i.b)("inlineCode",{parentName:"td"},"puma"),", ",Object(i.b)("inlineCode",{parentName:"td"},"uri"),", ",Object(i.b)("inlineCode",{parentName:"td"},"resolv")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"lib/**/*.erb")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Ah. You are a low-level ruby developer right? ",Object(i.b)("inlineCode",{parentName:"td"},"puma")," is a web server gem; ",Object(i.b)("inlineCode",{parentName:"td"},"ipaddr"),", ",Object(i.b)("inlineCode",{parentName:"td"},"uri"),", and ",Object(i.b)("inlineCode",{parentName:"td"},"resolv")," are standard lib. All erb files are ignored")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"gems")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"active*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"action*")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Who cares about rails internals?")))))}d.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),d=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,u=p["".concat(l,".").concat(m)]||p[m]||s[m]||i;return n?r.a.createElement(u,o(o({ref:t},b),{},{components:n})):r.a.createElement(u,o({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var b=2;b<i;b++)l[b]=n[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);